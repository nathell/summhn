(ns summhn.output
  (:require [clojure.java.io :as io]
            [hiccup2.core :as hiccup]
            [summhn.config :as config])
  (:import java.util.Date))

(defn layout [content]
  [:html
   [:head
    [:meta {:charset "utf-8"}]
    [:meta {:name "viewport" :content "width=device-width, initial-scale=1"}]
    [:title "Autosummarized HN"]
    [:link {:rel "stylesheet" :href "https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css"}]
    [:base {:href (config/get :deploy-url)}]]
   [:body
    [:nav.navbar {:role "navigation" :aria-label "main navigation"}
     [:div.navbar-brand
      [:h1.title.px-5.py-4
       [:a {:href "index.html"} "Autosummarized HN"]]]
     [:div.navbar-menu.is-active
      [:div.navbar-start
       [:a.navbar-item {:href "about.html"} "About"]
       [:a.navbar-item {:href "previously"} "Previously"]]
      [:div.navbar-end
       [:div.navbar-item "Generated on " (str (Date.))]]]]
    [:section.section
     content]]])

(defn generate [items]
  (layout
   [:div.container.px-3
      [:p.block.is-size-6
       [:em "All summaries have been generated automatically by GPT-3. No responsibility is claimed for their contents nor its accuracy."]]
      [:ol.items
       (for [{:keys [title time score by xurl item summary] :as entry} items
             :let [hn-url (str "https://news.ycombinator.com/item?id=" item)]]
         [:li.item.block
          [:p.title.is-4.mb-0 [:a {:href (or xurl hn-url)} title]]
          [:p.block "posted on " (str (Date. (* time 1000))) " by " by " | " [:a {:href hn-url} "view on HN"]]
          [:p.subtitle.is-5 summary]])]]))

(defn about []
  (layout
   [:div.container.px-3
       [:p.title "FAQ"]
       [:ul
        [:li.block
         [:p.is-size-4 "What is this?"]
         [:p
          [:a {:href "https://news.ycombinator.com/"} "Hacker News"]
          ", but with one-sentence summaries automatically generated by "
          [:a {:href "https://openai.com/"} "GPT-3"]
          "."]]
        [:li.block
         [:p.is-size-4 "Why?"]
         [:p "Because I can. And because it might actually save me (and perhaps someone else?) time, by helping to decide what to read."]]
        [:li.block
         [:p.is-size-4 "How?"]
         [:p "Every now and then (currently every 2 hours), the script gets the top 30 HN posts (with the help of HN API), then downloads those that point to HTML pages, cleans them up (with "
          [:a {:href "https://github.com/chimbori/crux/"} "Crux"]
          ", and then for each of them, tells GPT-3: "
          [:em "Summarize the following article in one sentence: [article]."]
          " That's it, really. To keep the request/response sizes within API limits, I trim the article at sentence boundary at around 3000 characters."]]
        [:li.block
         [:p.is-size-4 "What's the tech stack?"]
         [:p "A Clojure script gets periodically run by Cron and generates static HTMLs. I cache the articles as well as output from GPT-3, so hopefully I'm not going to go bankrupt."]]
        [:li.block
         [:p.is-size-4 "What's your OpenAI bill?"]
         [:p "Dunno yet. Depends on how often the HN stories change. I've capped my bill at $20, so if it stops working it's probably because I hit the limit."]]
        [:li.block
         [:p.is-size-4 "Can it be updated more often?"]
         [:p "Sure. " [:a {:href "mailto:dj@danieljanus.pl"} "Wanna sponsor the OpenAI bill?"]]]
        [:li.block
         [:p.is-size-4 "Is there source code?"]
         [:p "There will be, but not now. It's a thing hacked together in like 4 hours, and the code is really quick and dirty."]]
        [:li.block
         [:p.is-size-4 "Whodunit?"]
         [:p [:a {:href "https://danieljanus.pl"} "Daniel Janus."]]]]]))

(defn save! [path content]
  (let [path (str (config/get :output-directory) "/" path)]
    (io/make-parents path)
    (spit path (hiccup/html content))))
